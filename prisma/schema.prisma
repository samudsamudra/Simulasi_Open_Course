// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Module {
  id       Int    @id @default(autoincrement())
  courseId Int
  title    String
  content  String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
  id         Int      @id @default(autoincrement())
  userId     Int
  courseId   Int
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Quiz {
  id            Int      @id @default(autoincrement())
  courseId      Int
  question      String
  options       Json
  correctAnswer String
  createdAt     DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  submissions Submission[]
}

model Submission {
  id          Int      @id @default(autoincrement())
  userId      Int
  quizId      Int
  answer      String
  submittedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Certificate {
  id       Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  issuedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("student")
  createdAt DateTime @default(now())

  courses      CourseEnrollment[]
  submissions  Submission[]
  certificates Certificate[]
  review       Review[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String
  price       Float    @default(0.0)
  createdAt   DateTime @default(now())

  modules      Module[]
  enrollments  CourseEnrollment[]
  quizzes      Quiz[]
  certificates Certificate[]
  review       Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int // Nilai rating antara 1-5
  comment   String? // Komentar opsional
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Student hanya bisa memberikan 1 review per course
}
